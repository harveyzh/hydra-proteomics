/*
	$Id: BasicData.java 3207 2009-04-09 06:48:11Z gregory $

	Copyright (C) 2006 Gregory Vincic, Olle Mansson
	Copyright (C) 2007 Gregory Vincic

	This file is part of Proteios.
	Available at http://www.proteios.org/

	Proteios is free software; you can redistribute it and/or modify it
	under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	Proteios is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
	02111-1307, USA.
*/
package org.proteios.core.data;

/**
	This is the root superclass of all data classes. Each class must inherit from
	this class or one of the subclasses. The main purpose of this class is to handle
	object identity. It contains a Hibernate mapping for the {@link #getId()} property
	and overrides the default implementations of the {@link #equals(Object)} and {@link
	#hashCode()} methods.
	<p>
	For all practical purposes object identity is the same as database identity, ie.
	two objects are considered equal if they reference the same row in the database.
	Objects that has not yet been saved to the database should be handled carefully 
	and not be put into <code>Set</code>:s or <code>Map</code>:s since that may break
	the contract for the <code>equals()</code> and <code>hashCode()</code> methods.
	<p>
	We recommend that the <code>equals()</code> and <code>hashCode()</code> methods
	not are overridden in subclasses, unless you really know what you are doing.
	Actually, we would have liked to make the methods <code>final</code> but that
	would disable the proxy feature of Hibernate.
	
	@author Nicklas
	@version 2.0
	@see <a href="../../../../../../../development/overview/data/basic.html">Basic classes and interfaces</a>
*/
public abstract class BasicData
	implements IdentifiableData
{

	public BasicData()
	{}
	
	/*
		From the Object class
		-------------------------------------------
	*/
	/**
		The string will look like <code>ClassName[id=55]</code> or 
		<code>ClassName[new]</code>.
	*/
	@Override
	public String toString()
	{
		String classname = this.getClass().getName();
		return classname.substring(classname.lastIndexOf(".")+1)+"["+(getId()==0 ? "new" : "id="+getId())+"]";
	}

	/**
		Check if this item is equal to another item. They are considered to be 
		equal if they are of the same class and have the same ID. 
		Items that has not yet been assigned an ID (id == 0) are equal
		only if they refer to the same object instance. We must also handle the
		fact that the <code>other</code> object can be a Hibernate proxy, which is
		a dynamically generated subclass of the actual class.
		<b>Do not override this method in a subclass!</b>
	*/
	@Override
	public boolean equals(Object other)
	{
		if (this == other) return true;
		if (this.getId() == 0) return false;
		if (!this.getClass().isInstance(other)) return false;
		final BasicData that = (BasicData)other;
		return this.getId() == that.getId();
	}
	
	/**
		Stores the hash code of the item. This value is initialised the
		first time it is asked for by an application. 
		@see #hashCode()
	*/
	private int hashCode = 0;
	/**
		For new items (getId() returns 0) the hash code
		is the same as returned by the <code>System.identityHashCode()</code> method. 
		Items loaded from the database uses the <code>id</code> as the hash code. We must also
		consider the case were a new object is saved to the database. Our recommendation
		is to not place the object in <code>Set</code> (or other structure) that
		calls the <code>hashCode</code> method before the object is saved to the
		database. If you do that the contract for the <code>equals()/hashCode()</code>
		method is broken and <code>equals()</code> may return true even if <code>hashCode()</code>
		returns different values.
		<b>Do not override this method in a subclass!</b>
	*/
	@Override
	public int hashCode()
	{
		if (hashCode == 0)
		{
			hashCode = getId() == 0 ? System.identityHashCode(this) : getId();
		}
		return hashCode;
	}
	// -------------------------------------------
	
	private int id = 0;
	/**
		Get the id of the item. The id is automatically generated by the database 
		the first time the item is saved to the database. A new item has the value 0.
		@hibernate.id column="`id`" type="int" generator-class="native" unsaved-value="0"
	*/
	public int getId()
	{
		return id;
	}
	/**
		Set the id of the item. Only used by Hibernate.
		@param id The id of the item
	*/
	void setId(int id)
	{
		this.id = id;
	}
	
	private int version = 0;
	/**
		Get the version of the item. This value is used by Hibernate to check if another
		process or thread has modified the corresponding row in the databse since this item
		was loaded from the. If that is the case, this item can't be saved and an
		exception will be thrown.
		@hibernate.version column="`version`" type="int"
	*/
	public int getVersion()
	{
		return version;
	}
	/**
		Set the version of the item. Only used by Hibernate.
		@param version The version of the item
	*/
	void setVersion(int version)
	{
		this.version = version;
	}

}